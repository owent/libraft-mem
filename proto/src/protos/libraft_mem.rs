// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `libraft-mem.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct RaftLogEntry {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RaftLogEntry {
    fn default() -> &'a RaftLogEntry {
        <RaftLogEntry as ::protobuf::Message>::default_instance()
    }
}

impl RaftLogEntry {
    pub fn new() -> RaftLogEntry {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RaftLogEntry {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RaftLogEntry {
        RaftLogEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<RaftLogEntry>(
                    "RaftLogEntry",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RaftLogEntry {
        static mut instance: ::protobuf::lazy::Lazy<RaftLogEntry> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RaftLogEntry,
        };
        unsafe {
            instance.get(RaftLogEntry::new)
        }
    }
}

impl ::protobuf::Clear for RaftLogEntry {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RaftLogEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RaftLogEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RaftState {
    // message fields
    pub current_term: i64,
    pub vote_for: ::std::string::String,
    pub commit_index: i64,
    pub last_applied: i64,
    pub next_index: ::protobuf::RepeatedField<RaftLogEntry>,
    pub match_index: ::protobuf::RepeatedField<RaftLogEntry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RaftState {
    fn default() -> &'a RaftState {
        <RaftState as ::protobuf::Message>::default_instance()
    }
}

impl RaftState {
    pub fn new() -> RaftState {
        ::std::default::Default::default()
    }

    // int64 current_term = 11;


    pub fn get_current_term(&self) -> i64 {
        self.current_term
    }
    pub fn clear_current_term(&mut self) {
        self.current_term = 0;
    }

    // Param is passed by value, moved
    pub fn set_current_term(&mut self, v: i64) {
        self.current_term = v;
    }

    // string vote_for = 12;


    pub fn get_vote_for(&self) -> &str {
        &self.vote_for
    }
    pub fn clear_vote_for(&mut self) {
        self.vote_for.clear();
    }

    // Param is passed by value, moved
    pub fn set_vote_for(&mut self, v: ::std::string::String) {
        self.vote_for = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vote_for(&mut self) -> &mut ::std::string::String {
        &mut self.vote_for
    }

    // Take field
    pub fn take_vote_for(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.vote_for, ::std::string::String::new())
    }

    // int64 commit_index = 21;


    pub fn get_commit_index(&self) -> i64 {
        self.commit_index
    }
    pub fn clear_commit_index(&mut self) {
        self.commit_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_commit_index(&mut self, v: i64) {
        self.commit_index = v;
    }

    // int64 last_applied = 22;


    pub fn get_last_applied(&self) -> i64 {
        self.last_applied
    }
    pub fn clear_last_applied(&mut self) {
        self.last_applied = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_applied(&mut self, v: i64) {
        self.last_applied = v;
    }

    // repeated .libraft_mem.RaftLogEntry next_index = 31;


    pub fn get_next_index(&self) -> &[RaftLogEntry] {
        &self.next_index
    }
    pub fn clear_next_index(&mut self) {
        self.next_index.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_index(&mut self, v: ::protobuf::RepeatedField<RaftLogEntry>) {
        self.next_index = v;
    }

    // Mutable pointer to the field.
    pub fn mut_next_index(&mut self) -> &mut ::protobuf::RepeatedField<RaftLogEntry> {
        &mut self.next_index
    }

    // Take field
    pub fn take_next_index(&mut self) -> ::protobuf::RepeatedField<RaftLogEntry> {
        ::std::mem::replace(&mut self.next_index, ::protobuf::RepeatedField::new())
    }

    // repeated .libraft_mem.RaftLogEntry match_index = 32;


    pub fn get_match_index(&self) -> &[RaftLogEntry] {
        &self.match_index
    }
    pub fn clear_match_index(&mut self) {
        self.match_index.clear();
    }

    // Param is passed by value, moved
    pub fn set_match_index(&mut self, v: ::protobuf::RepeatedField<RaftLogEntry>) {
        self.match_index = v;
    }

    // Mutable pointer to the field.
    pub fn mut_match_index(&mut self) -> &mut ::protobuf::RepeatedField<RaftLogEntry> {
        &mut self.match_index
    }

    // Take field
    pub fn take_match_index(&mut self) -> ::protobuf::RepeatedField<RaftLogEntry> {
        ::std::mem::replace(&mut self.match_index, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RaftState {
    fn is_initialized(&self) -> bool {
        for v in &self.next_index {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.match_index {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.current_term = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.vote_for)?;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.commit_index = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_applied = tmp;
                },
                31 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.next_index)?;
                },
                32 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.match_index)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.current_term != 0 {
            my_size += ::protobuf::rt::value_size(11, self.current_term, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.vote_for.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.vote_for);
        }
        if self.commit_index != 0 {
            my_size += ::protobuf::rt::value_size(21, self.commit_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_applied != 0 {
            my_size += ::protobuf::rt::value_size(22, self.last_applied, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.next_index {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.match_index {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.current_term != 0 {
            os.write_int64(11, self.current_term)?;
        }
        if !self.vote_for.is_empty() {
            os.write_string(12, &self.vote_for)?;
        }
        if self.commit_index != 0 {
            os.write_int64(21, self.commit_index)?;
        }
        if self.last_applied != 0 {
            os.write_int64(22, self.last_applied)?;
        }
        for v in &self.next_index {
            os.write_tag(31, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.match_index {
            os.write_tag(32, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RaftState {
        RaftState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "current_term",
                    |m: &RaftState| { &m.current_term },
                    |m: &mut RaftState| { &mut m.current_term },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "vote_for",
                    |m: &RaftState| { &m.vote_for },
                    |m: &mut RaftState| { &mut m.vote_for },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "commit_index",
                    |m: &RaftState| { &m.commit_index },
                    |m: &mut RaftState| { &mut m.commit_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "last_applied",
                    |m: &RaftState| { &m.last_applied },
                    |m: &mut RaftState| { &mut m.last_applied },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RaftLogEntry>>(
                    "next_index",
                    |m: &RaftState| { &m.next_index },
                    |m: &mut RaftState| { &mut m.next_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RaftLogEntry>>(
                    "match_index",
                    |m: &RaftState| { &m.match_index },
                    |m: &mut RaftState| { &mut m.match_index },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RaftState>(
                    "RaftState",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RaftState {
        static mut instance: ::protobuf::lazy::Lazy<RaftState> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RaftState,
        };
        unsafe {
            instance.get(RaftState::new)
        }
    }
}

impl ::protobuf::Clear for RaftState {
    fn clear(&mut self) {
        self.current_term = 0;
        self.vote_for.clear();
        self.commit_index = 0;
        self.last_applied = 0;
        self.next_index.clear();
        self.match_index.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RaftState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RaftState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RaftReuqestVoteRequest {
    // message fields
    pub term_id: i64,
    pub candidate_id: ::std::string::String,
    pub last_log_index: i64,
    pub last_log_term: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RaftReuqestVoteRequest {
    fn default() -> &'a RaftReuqestVoteRequest {
        <RaftReuqestVoteRequest as ::protobuf::Message>::default_instance()
    }
}

impl RaftReuqestVoteRequest {
    pub fn new() -> RaftReuqestVoteRequest {
        ::std::default::Default::default()
    }

    // int64 term_id = 1;


    pub fn get_term_id(&self) -> i64 {
        self.term_id
    }
    pub fn clear_term_id(&mut self) {
        self.term_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_term_id(&mut self, v: i64) {
        self.term_id = v;
    }

    // string candidate_id = 2;


    pub fn get_candidate_id(&self) -> &str {
        &self.candidate_id
    }
    pub fn clear_candidate_id(&mut self) {
        self.candidate_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_candidate_id(&mut self, v: ::std::string::String) {
        self.candidate_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_candidate_id(&mut self) -> &mut ::std::string::String {
        &mut self.candidate_id
    }

    // Take field
    pub fn take_candidate_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.candidate_id, ::std::string::String::new())
    }

    // int64 last_log_index = 3;


    pub fn get_last_log_index(&self) -> i64 {
        self.last_log_index
    }
    pub fn clear_last_log_index(&mut self) {
        self.last_log_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_log_index(&mut self, v: i64) {
        self.last_log_index = v;
    }

    // int64 last_log_term = 4;


    pub fn get_last_log_term(&self) -> i64 {
        self.last_log_term
    }
    pub fn clear_last_log_term(&mut self) {
        self.last_log_term = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_log_term(&mut self, v: i64) {
        self.last_log_term = v;
    }
}

impl ::protobuf::Message for RaftReuqestVoteRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.term_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.candidate_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_log_index = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_log_term = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.candidate_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.candidate_id);
        }
        if self.last_log_index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.last_log_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_log_term != 0 {
            my_size += ::protobuf::rt::value_size(4, self.last_log_term, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term_id != 0 {
            os.write_int64(1, self.term_id)?;
        }
        if !self.candidate_id.is_empty() {
            os.write_string(2, &self.candidate_id)?;
        }
        if self.last_log_index != 0 {
            os.write_int64(3, self.last_log_index)?;
        }
        if self.last_log_term != 0 {
            os.write_int64(4, self.last_log_term)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RaftReuqestVoteRequest {
        RaftReuqestVoteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "term_id",
                    |m: &RaftReuqestVoteRequest| { &m.term_id },
                    |m: &mut RaftReuqestVoteRequest| { &mut m.term_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "candidate_id",
                    |m: &RaftReuqestVoteRequest| { &m.candidate_id },
                    |m: &mut RaftReuqestVoteRequest| { &mut m.candidate_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "last_log_index",
                    |m: &RaftReuqestVoteRequest| { &m.last_log_index },
                    |m: &mut RaftReuqestVoteRequest| { &mut m.last_log_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "last_log_term",
                    |m: &RaftReuqestVoteRequest| { &m.last_log_term },
                    |m: &mut RaftReuqestVoteRequest| { &mut m.last_log_term },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RaftReuqestVoteRequest>(
                    "RaftReuqestVoteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RaftReuqestVoteRequest {
        static mut instance: ::protobuf::lazy::Lazy<RaftReuqestVoteRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RaftReuqestVoteRequest,
        };
        unsafe {
            instance.get(RaftReuqestVoteRequest::new)
        }
    }
}

impl ::protobuf::Clear for RaftReuqestVoteRequest {
    fn clear(&mut self) {
        self.term_id = 0;
        self.candidate_id.clear();
        self.last_log_index = 0;
        self.last_log_term = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RaftReuqestVoteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RaftReuqestVoteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RaftReuqestVoteResponse {
    // message fields
    pub term_id: i64,
    pub vote_granted: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RaftReuqestVoteResponse {
    fn default() -> &'a RaftReuqestVoteResponse {
        <RaftReuqestVoteResponse as ::protobuf::Message>::default_instance()
    }
}

impl RaftReuqestVoteResponse {
    pub fn new() -> RaftReuqestVoteResponse {
        ::std::default::Default::default()
    }

    // int64 term_id = 1;


    pub fn get_term_id(&self) -> i64 {
        self.term_id
    }
    pub fn clear_term_id(&mut self) {
        self.term_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_term_id(&mut self, v: i64) {
        self.term_id = v;
    }

    // bool vote_granted = 2;


    pub fn get_vote_granted(&self) -> bool {
        self.vote_granted
    }
    pub fn clear_vote_granted(&mut self) {
        self.vote_granted = false;
    }

    // Param is passed by value, moved
    pub fn set_vote_granted(&mut self, v: bool) {
        self.vote_granted = v;
    }
}

impl ::protobuf::Message for RaftReuqestVoteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.term_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.vote_granted = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.vote_granted != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term_id != 0 {
            os.write_int64(1, self.term_id)?;
        }
        if self.vote_granted != false {
            os.write_bool(2, self.vote_granted)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RaftReuqestVoteResponse {
        RaftReuqestVoteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "term_id",
                    |m: &RaftReuqestVoteResponse| { &m.term_id },
                    |m: &mut RaftReuqestVoteResponse| { &mut m.term_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "vote_granted",
                    |m: &RaftReuqestVoteResponse| { &m.vote_granted },
                    |m: &mut RaftReuqestVoteResponse| { &mut m.vote_granted },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RaftReuqestVoteResponse>(
                    "RaftReuqestVoteResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RaftReuqestVoteResponse {
        static mut instance: ::protobuf::lazy::Lazy<RaftReuqestVoteResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RaftReuqestVoteResponse,
        };
        unsafe {
            instance.get(RaftReuqestVoteResponse::new)
        }
    }
}

impl ::protobuf::Clear for RaftReuqestVoteResponse {
    fn clear(&mut self) {
        self.term_id = 0;
        self.vote_granted = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RaftReuqestVoteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RaftReuqestVoteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RaftAppendEntriesRequest {
    // message fields
    pub term_id: i64,
    pub leader_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RaftAppendEntriesRequest {
    fn default() -> &'a RaftAppendEntriesRequest {
        <RaftAppendEntriesRequest as ::protobuf::Message>::default_instance()
    }
}

impl RaftAppendEntriesRequest {
    pub fn new() -> RaftAppendEntriesRequest {
        ::std::default::Default::default()
    }

    // int64 term_id = 1;


    pub fn get_term_id(&self) -> i64 {
        self.term_id
    }
    pub fn clear_term_id(&mut self) {
        self.term_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_term_id(&mut self, v: i64) {
        self.term_id = v;
    }

    // string leader_id = 2;


    pub fn get_leader_id(&self) -> &str {
        &self.leader_id
    }
    pub fn clear_leader_id(&mut self) {
        self.leader_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_leader_id(&mut self, v: ::std::string::String) {
        self.leader_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leader_id(&mut self) -> &mut ::std::string::String {
        &mut self.leader_id
    }

    // Take field
    pub fn take_leader_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.leader_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RaftAppendEntriesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.term_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.leader_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.leader_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.leader_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term_id != 0 {
            os.write_int64(1, self.term_id)?;
        }
        if !self.leader_id.is_empty() {
            os.write_string(2, &self.leader_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RaftAppendEntriesRequest {
        RaftAppendEntriesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "term_id",
                    |m: &RaftAppendEntriesRequest| { &m.term_id },
                    |m: &mut RaftAppendEntriesRequest| { &mut m.term_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "leader_id",
                    |m: &RaftAppendEntriesRequest| { &m.leader_id },
                    |m: &mut RaftAppendEntriesRequest| { &mut m.leader_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RaftAppendEntriesRequest>(
                    "RaftAppendEntriesRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RaftAppendEntriesRequest {
        static mut instance: ::protobuf::lazy::Lazy<RaftAppendEntriesRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RaftAppendEntriesRequest,
        };
        unsafe {
            instance.get(RaftAppendEntriesRequest::new)
        }
    }
}

impl ::protobuf::Clear for RaftAppendEntriesRequest {
    fn clear(&mut self) {
        self.term_id = 0;
        self.leader_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RaftAppendEntriesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RaftAppendEntriesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RaftAppendEntriesResponse {
    // message fields
    pub term_id: i64,
    pub success: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RaftAppendEntriesResponse {
    fn default() -> &'a RaftAppendEntriesResponse {
        <RaftAppendEntriesResponse as ::protobuf::Message>::default_instance()
    }
}

impl RaftAppendEntriesResponse {
    pub fn new() -> RaftAppendEntriesResponse {
        ::std::default::Default::default()
    }

    // int64 term_id = 1;


    pub fn get_term_id(&self) -> i64 {
        self.term_id
    }
    pub fn clear_term_id(&mut self) {
        self.term_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_term_id(&mut self, v: i64) {
        self.term_id = v;
    }

    // bool success = 2;


    pub fn get_success(&self) -> bool {
        self.success
    }
    pub fn clear_success(&mut self) {
        self.success = false;
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = v;
    }
}

impl ::protobuf::Message for RaftAppendEntriesResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.term_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.success != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term_id != 0 {
            os.write_int64(1, self.term_id)?;
        }
        if self.success != false {
            os.write_bool(2, self.success)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RaftAppendEntriesResponse {
        RaftAppendEntriesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "term_id",
                    |m: &RaftAppendEntriesResponse| { &m.term_id },
                    |m: &mut RaftAppendEntriesResponse| { &mut m.term_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "success",
                    |m: &RaftAppendEntriesResponse| { &m.success },
                    |m: &mut RaftAppendEntriesResponse| { &mut m.success },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RaftAppendEntriesResponse>(
                    "RaftAppendEntriesResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RaftAppendEntriesResponse {
        static mut instance: ::protobuf::lazy::Lazy<RaftAppendEntriesResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RaftAppendEntriesResponse,
        };
        unsafe {
            instance.get(RaftAppendEntriesResponse::new)
        }
    }
}

impl ::protobuf::Clear for RaftAppendEntriesResponse {
    fn clear(&mut self) {
        self.term_id = 0;
        self.success = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RaftAppendEntriesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RaftAppendEntriesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgHead {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgHead {
    fn default() -> &'a MsgHead {
        <MsgHead as ::protobuf::Message>::default_instance()
    }
}

impl MsgHead {
    pub fn new() -> MsgHead {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgHead {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgHead {
        MsgHead::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<MsgHead>(
                    "MsgHead",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MsgHead {
        static mut instance: ::protobuf::lazy::Lazy<MsgHead> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MsgHead,
        };
        unsafe {
            instance.get(MsgHead::new)
        }
    }
}

impl ::protobuf::Clear for MsgHead {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgHead {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgHead {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgBody {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgBody {
    fn default() -> &'a MsgBody {
        <MsgBody as ::protobuf::Message>::default_instance()
    }
}

impl MsgBody {
    pub fn new() -> MsgBody {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgBody {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgBody {
        MsgBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<MsgBody>(
                    "MsgBody",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MsgBody {
        static mut instance: ::protobuf::lazy::Lazy<MsgBody> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MsgBody,
        };
        unsafe {
            instance.get(MsgBody::new)
        }
    }
}

impl ::protobuf::Clear for MsgBody {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgBody {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Msg {
    // message fields
    pub head: ::protobuf::SingularPtrField<MsgHead>,
    pub body: ::protobuf::SingularPtrField<MsgBody>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Msg {
    fn default() -> &'a Msg {
        <Msg as ::protobuf::Message>::default_instance()
    }
}

impl Msg {
    pub fn new() -> Msg {
        ::std::default::Default::default()
    }

    // .libraft_mem.MsgHead head = 1;


    pub fn get_head(&self) -> &MsgHead {
        self.head.as_ref().unwrap_or_else(|| MsgHead::default_instance())
    }
    pub fn clear_head(&mut self) {
        self.head.clear();
    }

    pub fn has_head(&self) -> bool {
        self.head.is_some()
    }

    // Param is passed by value, moved
    pub fn set_head(&mut self, v: MsgHead) {
        self.head = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_head(&mut self) -> &mut MsgHead {
        if self.head.is_none() {
            self.head.set_default();
        }
        self.head.as_mut().unwrap()
    }

    // Take field
    pub fn take_head(&mut self) -> MsgHead {
        self.head.take().unwrap_or_else(|| MsgHead::new())
    }

    // .libraft_mem.MsgBody body = 2;


    pub fn get_body(&self) -> &MsgBody {
        self.body.as_ref().unwrap_or_else(|| MsgBody::default_instance())
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: MsgBody) {
        self.body = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut MsgBody {
        if self.body.is_none() {
            self.body.set_default();
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> MsgBody {
        self.body.take().unwrap_or_else(|| MsgBody::new())
    }
}

impl ::protobuf::Message for Msg {
    fn is_initialized(&self) -> bool {
        for v in &self.head {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.body {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.head)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.head.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.head.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.body.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Msg {
        Msg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MsgHead>>(
                    "head",
                    |m: &Msg| { &m.head },
                    |m: &mut Msg| { &mut m.head },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MsgBody>>(
                    "body",
                    |m: &Msg| { &m.body },
                    |m: &mut Msg| { &mut m.body },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Msg>(
                    "Msg",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Msg {
        static mut instance: ::protobuf::lazy::Lazy<Msg> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Msg,
        };
        unsafe {
            instance.get(Msg::new)
        }
    }
}

impl ::protobuf::Clear for Msg {
    fn clear(&mut self) {
        self.head.clear();
        self.body.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Msg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Msg {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11libraft-mem.proto\x12\x0blibraft_mem\"\x10\n\x0cRaftLogEntry:\0\"\
    \xcc\x01\n\tRaftState\x12\x16\n\x0ccurrent_term\x18\x0b\x20\x01(\x03B\0\
    \x12\x12\n\x08vote_for\x18\x0c\x20\x01(\tB\0\x12\x16\n\x0ccommit_index\
    \x18\x15\x20\x01(\x03B\0\x12\x16\n\x0clast_applied\x18\x16\x20\x01(\x03B\
    \0\x12/\n\nnext_index\x18\x1f\x20\x03(\x0b2\x19.libraft_mem.RaftLogEntry\
    B\0\x120\n\x0bmatch_index\x18\x20\x20\x03(\x0b2\x19.libraft_mem.RaftLogE\
    ntryB\0:\0\"x\n\x16RaftReuqestVoteRequest\x12\x11\n\x07term_id\x18\x01\
    \x20\x01(\x03B\0\x12\x16\n\x0ccandidate_id\x18\x02\x20\x01(\tB\0\x12\x18\
    \n\x0elast_log_index\x18\x03\x20\x01(\x03B\0\x12\x17\n\rlast_log_term\
    \x18\x04\x20\x01(\x03B\0:\0\"F\n\x17RaftReuqestVoteResponse\x12\x11\n\
    \x07term_id\x18\x01\x20\x01(\x03B\0\x12\x16\n\x0cvote_granted\x18\x02\
    \x20\x01(\x08B\0:\0\"D\n\x18RaftAppendEntriesRequest\x12\x11\n\x07term_i\
    d\x18\x01\x20\x01(\x03B\0\x12\x13\n\tleader_id\x18\x02\x20\x01(\tB\0:\0\
    \"C\n\x19RaftAppendEntriesResponse\x12\x11\n\x07term_id\x18\x01\x20\x01(\
    \x03B\0\x12\x11\n\x07success\x18\x02\x20\x01(\x08B\0:\0\"\x0b\n\x07MsgHe\
    ad:\0\"\x0b\n\x07MsgBody:\0\"S\n\x03Msg\x12$\n\x04head\x18\x01\x20\x01(\
    \x0b2\x14.libraft_mem.MsgHeadB\0\x12$\n\x04body\x18\x02\x20\x01(\x0b2\
    \x14.libraft_mem.MsgBodyB\0:\0B\0b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
